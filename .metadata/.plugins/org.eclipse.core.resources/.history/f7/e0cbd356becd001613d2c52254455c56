/**
 * 
 */
package com.snapdeal.monetization.budget.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BatchPreparedStatementSetter;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.PreparedStatementSetter;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

import com.snapdeal.monetization.base.aerospike.cache.CacheManager;
import com.snapdeal.monetization.base.common.serializer.SerializerType;
import com.snapdeal.monetization.budget.pojo.BudgetRule;
import com.snapdeal.monetization.budget.pojo.BudgetRuleSupcVendor;
import com.snapdeal.monetization.budget.pojo.BudgetRuleSupcVendorMapping;
import com.snapdeal.monetization.budget.pojo.BudgetRuleTemplate;
import com.snapdeal.monetization.budget.pojo.BudgetRuleVendorBrand;
import com.snapdeal.monetization.budget.pojo.BudgetRuleVendorBrandMapping;
import com.snapdeal.monetization.budget.rowmapper.BudgetRuleRowMapper;
import com.snapdeal.monetization.budget.rowmapper.BudgetRuleSupcVendorMappingRowMapper;
import com.snapdeal.monetization.budget.rowmapper.BudgetRuleVendorBrandMappingRowMapper;
import com.snapdeal.monetization.common.constant.AeroConstant;
import com.snapdeal.monetization.ps.constant.Constants;

/**
 * @author rahul.kumar05
 *
 */
@Repository("budgetRuleDao")
public class BudgetRuleDao {

	private static final Logger	LOGGER			= LoggerFactory.getLogger(BudgetRuleDao.class);
	@Autowired
	private CacheManager		cacheManager;
	@Autowired
	private JdbcTemplate		jdbcTemplate	= null;

	public void saveBudgetRuleSupcVendorMapping(final long ruleTrackingId, final List<BudgetRuleSupcVendorMapping> supcVendorBudgetRules)
			throws Exception {
		LOGGER.info("Going to save saveBudgetRuleSupcVendorMapping: " + ruleTrackingId);
		jdbcTemplate.batchUpdate(BudgetQueries.INSERT_SV_MAPPING_QUERY, new BatchPreparedStatementSetter() {
			@Override
			public void setValues(PreparedStatement ps, int i) throws SQLException {
				ps.setString(1, supcVendorBudgetRules.get(i).getSupc());
				ps.setString(2, supcVendorBudgetRules.get(i).getVendor());
				ps.setLong(3, ruleTrackingId);
				ps.setTimestamp(4, new Timestamp(System.currentTimeMillis()));
				ps.setTimestamp(5, new Timestamp(System.currentTimeMillis()));
			}

			public int getBatchSize() {
				return supcVendorBudgetRules.size();
			}
		});
	}

	public void saveBudgetRuleVendorBrandMapping(final long ruleTrackingId, final List<BudgetRuleVendorBrandMapping> vendorBrandBudgetRules)
			throws Exception {
		LOGGER.info("Going to save saveBudgetRuleVendorBrandMapping: " + ruleTrackingId);
		jdbcTemplate.batchUpdate(BudgetQueries.INSERT_VB_MAPPING_QUERY, new BatchPreparedStatementSetter() {
			@Override
			public void setValues(PreparedStatement ps, int i) throws SQLException {
				ps.setInt(1, vendorBrandBudgetRules.get(i).getBrand());
				ps.setString(2, vendorBrandBudgetRules.get(i).getVendor());
				ps.setLong(3, ruleTrackingId);
				ps.setTimestamp(4, new Timestamp(System.currentTimeMillis()));
				ps.setTimestamp(5, new Timestamp(System.currentTimeMillis()));
			}

			public int getBatchSize() {
				return vendorBrandBudgetRules.size();
			}
		});
	}

	public int saveBudgetRule(final BudgetRule budgetRule) throws Exception {
		LOGGER.info("Inside createRule");
		int budegtRuleId = 0;

		budegtRuleId = jdbcTemplate.update(BudgetQueries.INSERT_BUDGET_RULE_QUERY, new PreparedStatementSetter() {
			@Override
			public void setValues(PreparedStatement ps) throws SQLException {
				ps.setLong(1, budgetRule.getRuleTrackingId());
				ps.setString(2, budgetRule.getName());
				ps.setString(3, budgetRule.getRuleType().getRuleType());
				ps.setString(4, budgetRule.getRo());
				ps.setLong(5, budgetRule.getSaleTarget());
				ps.setLong(6, budgetRule.getGsvTarget());
				ps.setLong(7, budgetRule.getBudget());
				ps.setTimestamp(8, budgetRule.getStartTime());
				ps.setTimestamp(9, budgetRule.getEndTime());
				ps.setInt(10, Constants.BudgetStatus.CREATED);
				ps.setTimestamp(11, new Timestamp(System.currentTimeMillis()));
				ps.setTimestamp(12, new Timestamp(System.currentTimeMillis()));
				ps.setString(13, budgetRule.getCreator());
				ps.setString(14, budgetRule.getApprover());
				ps.setString(15, budgetRule.getEditor());
				ps.setTimestamp(16, budgetRule.getApprovedOn());
			}
		});
		LOGGER.info("Exiting from createRule");
		return budegtRuleId;
	}

	public int updateBudgetRule(final BudgetRule budgetRule) {
		LOGGER.info("Inside updateRule");
		int budgetRuleId = 0;
		try {
			budgetRuleId = jdbcTemplate.update(BudgetQueries.UPDATE_BUDGET_RULE_QUERY, new PreparedStatementSetter() {
				@Override
				public void setValues(PreparedStatement ps) throws SQLException {
					ps.setString(1, budgetRule.getName());
					ps.setString(2, budgetRule.getRo());
					ps.setLong(3, budgetRule.getSaleTarget());
					ps.setLong(4, budgetRule.getGsvTarget());
					ps.setLong(5, budgetRule.getBudget());
					ps.setTimestamp(6, budgetRule.getStartTime());
					ps.setTimestamp(7, budgetRule.getEndTime());
					ps.setInt(8, Constants.BudgetStatus.CREATED);
					ps.setString(9, budgetRule.getEditor());
					ps.setLong(10, budgetRule.getId());
				}
			});
		} catch (Exception e) {
			LOGGER.info("Error while updating budget rule {}", e);
		}
		LOGGER.info("Exiting from updateRule");
		return budgetRuleId;
	}

	public BudgetRuleTemplate<BudgetRuleSupcVendorMapping> getSupcVenorBudgetRuleById(Long ruleId) {
		LOGGER.info("Inside getBudgetRuleById");
		BudgetRuleTemplate<BudgetRuleSupcVendorMapping> budgetRules = new BudgetRuleTemplate<>();
		BudgetRule budgetRule = getBudgetRuleById(ruleId);
		budgetRules.setBudgetRule(budgetRule);
		List<BudgetRuleSupcVendorMapping> svBudgetRules = getBudgetRuleSupcVendorMappingByRuleId(budgetRule.getRuleTrackingId());
		budgetRules.setBudgetRuleFilterMapping(svBudgetRules);
		return budgetRules;
	}

	public BudgetRuleTemplate<BudgetRuleVendorBrandMapping> getVenorBrandBudgetRuleById(Long ruleId) {
		LOGGER.info("Inside getVenorBrandBudgetRuleById");
		BudgetRuleTemplate<BudgetRuleVendorBrandMapping> budgetRules = new BudgetRuleTemplate<>();
		BudgetRule budgetRule = getBudgetRuleById(ruleId);
		budgetRules.setBudgetRule(budgetRule);
		List<BudgetRuleVendorBrandMapping> svBudgetRules = getBudgetRuleVendorBrandMappingByRuleId(budgetRule.getRuleTrackingId());
		budgetRules.setBudgetRuleFilterMapping(svBudgetRules);
		return budgetRules;
	}

	public BudgetRule getBudgetRuleById(Long ruleId) {
		LOGGER.info("Inside getBudgetRuleById");
		BudgetRule budgetRule = null;
		try {
			budgetRule = (BudgetRule) jdbcTemplate.queryForObject(BudgetQueries.SELECT_BUDGET_RULE_QUERY, new Object[] { ruleId },
					new BudgetRuleRowMapper());
		} catch (Exception e) {
			LOGGER.error("Error while fetching budget rule by id: {}, {}", ruleId, e);
		}
		return budgetRule;
	}

	public List<BudgetRuleSupcVendorMapping> getBudgetRuleSupcVendorMappingByRuleId(Long ruleTrackingId) {
		LOGGER.info("Inside getBudgetRuleSupcVendorMappingByRuleId");

		List<BudgetRuleSupcVendorMapping> svBudgetRules = null;
		try {
			svBudgetRules = (List<BudgetRuleSupcVendorMapping>) jdbcTemplate.query(BudgetQueries.SELECT_SV_MAPPING_QUERY,
					new Object[] { ruleTrackingId }, new BudgetRuleSupcVendorMappingRowMapper());
		} catch (Exception e) {
			LOGGER.info("Error while fetching supc vendor rule by rule tracking id: {} {}", ruleTrackingId, e);
		}
		return svBudgetRules;
	}

	public List<BudgetRuleVendorBrandMapping> getBudgetRuleVendorBrandMappingByRuleId(Long ruleTrackingId) {
		LOGGER.info("Inside getBudgetRuleVendorBrandMappingByRuleId");
		List<BudgetRuleVendorBrandMapping> vbBudgetRules = null;
		try {
			vbBudgetRules = (List<BudgetRuleVendorBrandMapping>) jdbcTemplate.query(BudgetQueries.SELECT_VB_MAPPING_QUERY,
					new Object[] { ruleTrackingId }, new BudgetRuleVendorBrandMappingRowMapper());

		} catch (Exception e) {
			LOGGER.info("Error while fetching vendor brand rule by rule tracking id: {} {}", ruleTrackingId, e);
		}
		return vbBudgetRules;
	}

	public List<BudgetRuleSupcVendor> getScheduledBudgetRuleSupcVendor(final String supc, final List<String> vendors) {
		LOGGER.info("Inside getScheduledBudgetRuleSupcVendor");

		final StringBuilder queryBuilder = new StringBuilder();
		queryBuilder.append(
				"select rb.id, rb.rule_tracking_id, rb.name, rb.start_time, rb.end_time, rsvm.supc, rsvm.vendor_code from mtz_budget.rule_budget rb join mtz_budget.rule_supc_vendor_mapping rsvm on rb.rule_tracking_id = rsvm.rule_tracking_id where rb.status <> 0 and rb.end_time > now() and rsvm.supc = ? and rsvm.vendor_code in (:vendors)");

		List<BudgetRuleSupcVendor> budgetRuleSupcVendors = null;
		try {
			final String repeatedStr = StringUtils.repeat("?", ",", vendors.size());
			final String query = StringUtils.replace(queryBuilder.toString(), ":vendors", repeatedStr);
			budgetRuleSupcVendors = (List<BudgetRuleSupcVendor>) jdbcTemplate.query(new PreparedStatementCreator() {

				@Override
				public PreparedStatement createPreparedStatement(Connection con) throws SQLException {
					PreparedStatement ps = con.prepareStatement(query);
					ps.setString(1, supc);
					int i = 2;
					for (String v : vendors) {
						ps.setString(i, v);
						i++;
					}
					return ps;
				}

			}, new RowMapper<BudgetRuleSupcVendor>() {
				@Override
				public BudgetRuleSupcVendor mapRow(ResultSet rs, int rowNum) {
					BudgetRuleSupcVendor budgetRuleSupcVendor = new BudgetRuleSupcVendor();
					try {
						budgetRuleSupcVendor.setId(rs.getLong("id"));
						budgetRuleSupcVendor.setRuleTrackingId(rs.getLong("rule_tracking_id"));
						budgetRuleSupcVendor.setName(rs.getString("name"));
						budgetRuleSupcVendor.setStartTime(rs.getTimestamp("start_time"));
						budgetRuleSupcVendor.setEndTime(rs.getTimestamp("end_time"));
						budgetRuleSupcVendor.setSupc(rs.getString("supc"));
						budgetRuleSupcVendor.setVendorCode(rs.getString("vendor_code"));
					} catch (SQLException e) {
						LOGGER.error("Error while fetching rule from db");
					}
					return budgetRuleSupcVendor;
				}
			});

		} catch (Exception e) {
			LOGGER.error("Error while fetching supc vendor scheduled budget rules {}", e);
		}
		return budgetRuleSupcVendors;
	}

	public List<BudgetRuleVendorBrand> getScheduledBudgetRuleVendorBrand(final Integer brand, final List<String> vendors) {
		LOGGER.info("Inside getScheduledBudgetRuleVendorBrand");
		StringBuilder queryBuilder = new StringBuilder();
		queryBuilder.append(
				"select rb.id, rb.rule_tracking_id, rb.name, rb.start_time, rb.end_time, rvbm.brand_id, rvbm.vendor_code from mtz_budget.rule_budget rb join mtz_budget.rule_vendor_brand_mapping rvbm on rb.rule_tracking_id = rvbm.rule_tracking_id where rb.status <> 0 and rvbm.brand_id = ? and rvbm.vendor_code in (:vendors)");

		List<BudgetRuleVendorBrand> budgetRuleVendorBrands = null;
		try {
			final String repeatedStr = StringUtils.repeat("?", ",", vendors.size());
			final String query = StringUtils.replace(queryBuilder.toString(), ":vendors", repeatedStr);
			budgetRuleVendorBrands = (List<BudgetRuleVendorBrand>) jdbcTemplate.query(new PreparedStatementCreator() {

				@Override
				public PreparedStatement createPreparedStatement(Connection con) throws SQLException {
					PreparedStatement ps = con.prepareStatement(query);
					ps.setInt(1, brand);
					int i = 2;
					for (String v : vendors) {
						ps.setString(i, v);
						i++;
					}
					return ps;
				}

			}, new RowMapper<BudgetRuleVendorBrand>() {
				@Override
				public BudgetRuleVendorBrand mapRow(ResultSet rs, int rowNum) {
					BudgetRuleVendorBrand budgetRuleVendorbrand = new BudgetRuleVendorBrand();
					try {
						budgetRuleVendorbrand.setId(rs.getLong("id"));
						budgetRuleVendorbrand.setRuleTrackingId(rs.getLong("rule_tracking_id"));
						budgetRuleVendorbrand.setName(rs.getString("name"));
						budgetRuleVendorbrand.setStartTime(rs.getTimestamp("start_time"));
						budgetRuleVendorbrand.setEndTime(rs.getTimestamp("end_time"));
						budgetRuleVendorbrand.setBrandId(rs.getInt("brand_id"));
						budgetRuleVendorbrand.setVendorCode(rs.getString("vendor_code"));
					} catch (SQLException e) {
						LOGGER.error("Error while fetching rule from db");
					}
					return budgetRuleVendorbrand;
				}
			});
		} catch (Exception e) {
			LOGGER.error("Error while fetching vendor barnd scheduled budget rules {}", e);
		}
		return budgetRuleVendorBrands;
	}

	public void deleteBudgetRuleSupcVendorMappingByRuleTrackingId(Long ruleTrackingId) {
		LOGGER.info("Going to delete budgetRuleSupcVendorMapping for ruleTrackingId: " + ruleTrackingId);

		try {
			jdbcTemplate.update(BudgetQueries.DELETE_SV_MAPPING_QUERY, ruleTrackingId);
		} catch (Exception e) {
			LOGGER.error("Error while deleting supc vendor mapping {}", e);
		}
		LOGGER.debug("Deleted budgetRuleSupcVendorMapping");
	}

	public void deleteBudgetRuleVendorBrandMappingByRuleTrackingId(Long ruleTrackingId) {
		LOGGER.info("Going to delete budgetRuleVendorBrandMapping for ruleTrackingId: " + ruleTrackingId);
		try {
			jdbcTemplate.update(BudgetQueries.DELETE_VB_MAPPING_QUERY, ruleTrackingId);
		} catch (Exception e) {
			LOGGER.error("Error while deleting vendor brand mapping {}", e);
		}
		LOGGER.debug("Deleted budgetRuleVendorBrandMapping");
	}

	public void updateBudgetRuleStatus(long ruleId, int status, String comment) {
		LOGGER.info("Updating status as {} of ruleId: ", status, ruleId);
		try {
			jdbcTemplate.update(BudgetQueries.UPDATE_BR_STATUS_QUERY, status, comment, ruleId);
		} catch (Exception e) {
			LOGGER.error("Error while updating budget rule {}", e);
		}

		LOGGER.debug("Update status");
	}

	public void approveBudgetRule(long ruleId, int status, String approver) {
		LOGGER.info("Updating status as {} of ruleId: ", status, ruleId);
		try {
			jdbcTemplate.update(BudgetQueries.APPROVE_BR_QUERY, status, approver, ruleId);
		} catch (Exception e) {
			LOGGER.error("Error while updating budget rule {}", e);
		}

		LOGGER.debug("Update status");
	}

	public List<BudgetRule> getActiveBudgetRuleByRuleTrackingId(long ruleTrackingId) {
		LOGGER.info("Going to fetch budgetRules for ruleTrackingId: {}", ruleTrackingId);
		List<BudgetRule> budgetRules = null;
		try {
			budgetRules = (List<BudgetRule>) jdbcTemplate.query(BudgetQueries.GET_LIVE_BR_QUERY, new Object[] { ruleTrackingId },
					new BudgetRuleRowMapper());
		} catch (Exception e) {
			LOGGER.error("Error while fetching active rudget rules: {}", e);
		}
		return budgetRules;
	}

	public List<BudgetRule> getAllActiveBudgetRule() {
		LOGGER.info("Inside getBudgetRuleById");
		List<BudgetRule> budgetRules = null;
		try {
			budgetRules = (List<BudgetRule>) jdbcTemplate.query(BudgetQueries.GET_ACTIVE_BR_QUERY, new BudgetRuleRowMapper());
		} catch (Exception e) {
			LOGGER.error("Error while fetching active budget rules {}", e);
		}
		return budgetRules;
	}

	public BudgetRuleSupcVendor getRuleFromCache(String supc, String vendorCode) {
		BudgetRuleSupcVendor budgetRuleSupcVendor = null;
		try {
			budgetRuleSupcVendor = cacheManager.getObject(AeroConstant.Namespace.MONETIZATION_CACHE, AeroConstant.Set.SUPC_VENDOR_BUDGET_RULE,
					StringUtils.join(supc, AeroConstant.SEPRATOR, vendorCode), BudgetRuleSupcVendor.class, SerializerType.PROTOSTUFF_SERIALIZER);
		} catch (Exception e) {
			LOGGER.error("Error while getting budget rule for {}-{}", supc, vendorCode);
		}

		return budgetRuleSupcVendor;

	}

	public BudgetRuleVendorBrand getRuleFromCache(String vendorCode, Integer brandId) {
		BudgetRuleVendorBrand budgetRuleVendorBrand = null;
		try {
			budgetRuleVendorBrand = cacheManager.getObject(AeroConstant.Namespace.MONETIZATION_CACHE, AeroConstant.Set.VENDOR_BRAND_BUDGET_RULE,
					StringUtils.join(vendorCode, AeroConstant.SEPRATOR, String.valueOf(brandId)), BudgetRuleVendorBrand.class,
					SerializerType.PROTOSTUFF_SERIALIZER);
		} catch (Exception e) {
			LOGGER.error("Error while getting budget rule for {}-{}", vendorCode, brandId);
		}
		return budgetRuleVendorBrand;
	}

	public void updateRuleInCache(BudgetRuleSupcVendor budgetRuleSupcVendor) {
		try {
			cacheManager.putValue(AeroConstant.Namespace.MONETIZATION_CACHE, AeroConstant.Set.SUPC_VENDOR_BUDGET_RULE,
					StringUtils.join(budgetRuleSupcVendor.getSupc(), AeroConstant.SEPRATOR, budgetRuleSupcVendor.getVendorCode()),
					budgetRuleSupcVendor, SerializerType.PROTOSTUFF_SERIALIZER, -1);
		} catch (Exception e) {
			LOGGER.error("Error while updating SV budget rule for {}-{}", budgetRuleSupcVendor.getSupc(), budgetRuleSupcVendor.getVendorCode());
		}
	}

	public void updateRuleInCache(BudgetRuleVendorBrand budgetRuleVendorBrand) {
		try {
			cacheManager.putValue(
					AeroConstant.Namespace.MONETIZATION_CACHE, AeroConstant.Set.VENDOR_BRAND_BUDGET_RULE, StringUtils
							.join(budgetRuleVendorBrand.getVendorCode(), AeroConstant.SEPRATOR, String.valueOf(budgetRuleVendorBrand.getBrandId())),
					budgetRuleVendorBrand, SerializerType.PROTOSTUFF_SERIALIZER, -1);
		} catch (Exception e) {
			LOGGER.error("Error while updating VB budget rule for {}-{}", budgetRuleVendorBrand.getVendorCode(), budgetRuleVendorBrand.getBrandId());
		}
	}

	public void removeRuleFromCache(String supc, String VendorCode) {

		try {
			cacheManager.removeFromCache(AeroConstant.Namespace.MONETIZATION_CACHE, AeroConstant.Set.SUPC_VENDOR_BUDGET_RULE,
					StringUtils.join(supc, AeroConstant.SEPRATOR, VendorCode));
		} catch (Exception e) {
			LOGGER.error("Error while deleting SV budget rule for {}-{}", supc, VendorCode);
		}
	}

	@SuppressWarnings("unchecked")
	public void removeRuleFromCache(String VendorCode, Integer brandId) {

		try {
			cacheManager.removeFromCache(AeroConstant.Namespace.MONETIZATION_CACHE, AeroConstant.Set.VENDOR_BRAND_BUDGET_RULE,
					StringUtils.join(VendorCode, AeroConstant.SEPRATOR, brandId));
		} catch (Exception e) {
			LOGGER.error("Error while deleting VB budget rule for {}-{}", VendorCode, brandId);
		}
	}
}
