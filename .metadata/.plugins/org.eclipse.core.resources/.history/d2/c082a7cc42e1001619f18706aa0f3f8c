/**
 * 
 */
package com.snapdeal.monetization.budget.action;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.joda.time.DateTime;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

import com.snapdeal.base.utils.StringUtils;
import com.snapdeal.monetization.budget.pojo.BudgetRule;
import com.snapdeal.monetization.budget.pojo.BudgetRuleSupcVendor;
import com.snapdeal.monetization.budget.pojo.BudgetRuleSupcVendorMapping;
import com.snapdeal.monetization.budget.pojo.BudgetRuleTemplate;
import com.snapdeal.monetization.budget.pojo.BudgetRuleType;
import com.snapdeal.monetization.budget.pojo.BudgetRuleVendorBrand;
import com.snapdeal.monetization.budget.pojo.BudgetRuleVendorBrandMapping;
import com.snapdeal.monetization.budget.pojo.BudgetTrackingInfo;
import com.snapdeal.monetization.budget.service.BudgetRuleScheduleService;
import com.snapdeal.monetization.budget.service.BudgetRuleService;
import com.snapdeal.monetization.budget.service.BudgetTrackingService;
import com.snapdeal.monetization.ps.constant.Constants;

import action.Action;
import utility.DateParser;
import utility.Page;

/**
 * @author rahul.kumar05
 *
 */
public class BudgetRuleAction extends Action {

	private static final Logger			LOGGER				= LoggerFactory.getLogger(BudgetRuleAction.class);

	private static final String			VENDOR_SAPERATER	= ",";

	@Autowired
	private BudgetRuleService			budgetRuleService;

	@Autowired
	private BudgetTrackingService		budgetTrackingService;

	@Autowired
	private BudgetRuleScheduleService	budgetRuleScheduleService;

	private Long						ruleId;
	private Long						ruleTrackingId;
	private String						name;
	private String						pro;
	private String						ruleType;
	private String						supc;
	private String						vendor;
	private Integer						brand;
	private Long						budget;
	private Long						saleTarget;
	private Long						gsvTarget;
	private String						startTime;
	private String						endTime;
	private String						userAction;
	private Integer						status;
	private File						file;
	private String 						fileName;
	private File						filedownload;
	InputStream							inputStream			= null;
	private Boolean						isRoFile;

	public String execute() throws Exception {

		if (!userCheck()) {
			return Page.LoginPage;
		} else {
			setCurrentAction(Page.CreateBudgetRulePage);
			if ("download".equals(getUserAction())) {
				LOGGER.info("Got request for file download");
				filedownload=new File(Constants.MtzBudget.DATA_DIR_PATH + getRuleId() + "_" + getName()  + ".pdf");
				inputStream = new FileInputStream(filedownload);
				return "downloadFile";
			} else if(null != file) {
				LOGGER.info("Got request for file upload");
				String fileName = System.currentTimeMillis() + "_" + file.getName();
				budgetRuleService.saveFile(file, fileName);
				setFileName(fileName);
				if(null != ruleId) {
					populateActionParameters();
				}
				return Page.CreateBudgetRulePage;
			} else if (("view".equalsIgnoreCase(getUserAction()))) {
				LOGGER.info("Got request to fetch rule for ruleId: {}", getRuleId());
				if (getRuleType().equals(BudgetRuleType.SUPC_VENDOR.name())) {
					BudgetRuleTemplate<BudgetRuleSupcVendorMapping> supcVendorBudgetRule = budgetRuleService.getSupcVenorBudgetRuleById(getRuleId());
					populateActionParameters(supcVendorBudgetRule);
				} else {
					BudgetRuleTemplate<BudgetRuleVendorBrandMapping> vendorBrandBudgetRule = budgetRuleService.getVenorBrandBudgetRuleById(getRuleId());
					populateActionParameters(vendorBrandBudgetRule);
				}
				return Page.CreateBudgetRulePage;
			} else if (!"submit".equals(getUserAction())) {
				return Page.CreateBudgetRulePage;
			} else if (null == getRuleId()) {
				LOGGER.info("Got request for create new rule");
				if (!validateRequest()) {
					LOGGER.warn("Invalid rule type found for rule: " + getName());
					setReport("Invalid rule type in request");
					return Page.ActivityPage;
				}
				String validateOverlapingMsg = validateOverlaping(null);
				if (null != validateOverlapingMsg && !validateOverlapingMsg.isEmpty()) {
					setReport("Below products are already scheduled: \n" + validateOverlapingMsg);
					return Page.ActivityPage;
				}
				long ruleId = createRule();
				if (0 == ruleId) {
					return "Internal error.";
				}
				//Rename the ro/pro file
				String newFileName = ruleId + "_" + getName();
				budgetRuleService.renameFile(getFileName(), newFileName);
				setReport("Success");
				return Page.ActivityPage;
			} else {
				LOGGER.info("Got request for edit exiting rule");
				String message = validateAndEditRule();
				//Rename the updated ro/pro file
				String newFileName = getRuleId() + "_" + getName();
				budgetRuleService.renameFile(getFileName(), newFileName);
				setReport(message);
				return Page.ActivityPage;
			}
		}
	}

	private String validateUnEditableFields(BudgetRule budgetRule) {
		if (!changeDateFarmate(budgetRule.getStartTime().toString()).equals(getStartTime())) {
			return "Error: Can't change start date of live rule";
		} else if (!budgetRule.getName().equals(getName())) {
			return "Error: Can't change name of live rule";
		} else if (!budgetRule.getRo().equals(getPro())) {
			return "Error: Can't change Ro/Pro of live rule";
		} else if (!budgetRule.getRuleType().getRuleType().equals(getRuleType())) {
			return "Error: Can't change rule type";
		} else
			return null;
	}

	/* Returns error message */
	private String validateAndEditRule() {
		BudgetRule existingBudgetRule = budgetRuleService.getBudgetRuleById(getRuleId());
		if (existingBudgetRule.getStatus() == Constants.BudgetStatus.CREATED || existingBudgetRule.getStatus() == Constants.BudgetStatus.STARTED
				|| existingBudgetRule.getStatus() == Constants.BudgetStatus.APPROVED) {
			LOGGER.info("Rule is not live yet, can edit anything");
			String errorMsg = editRule(existingBudgetRule);
			if (null != errorMsg) {
				return errorMsg;
			} else if(!existingBudgetRule.getName().equals(getName())) {
				//Rename ro file name
				budgetRuleService.renameFile(budgetRuleService.generateRoFileName(existingBudgetRule), existingBudgetRule.getId() + "_" + getName());
			}
		} else {
			String errorMsg = validateUnEditableFields(existingBudgetRule);
			if (!StringUtils.isEmpty(errorMsg)) {
				LOGGER.info(errorMsg);
				return errorMsg;
			} else {
				if (!existingBudgetRule.getEndTime().equals(getEndTimeStamp())) {
					LOGGER.info("Rule is active and editing end date, Do validate");
					String validateOverlapingMsg = validateOverlaping(existingBudgetRule);
					if (null != validateOverlapingMsg && !validateOverlapingMsg.isEmpty()) {
						return "Below products are already scheduled: \n" + validateOverlapingMsg;
					}
				}
				if (getBudget() < existingBudgetRule.getBudget()) {
					BudgetTrackingInfo budgetTrackingInfo = budgetTrackingService.getBudgetWithSpent(existingBudgetRule.getRuleTrackingId());
					if (getBudget() <= budgetTrackingInfo.getBudgetSpent()) {
						LOGGER.info("New budget is less than spent budget");
						return "Error! New budget is less than spent budget";
					}
				}
				BudgetRule budgetRule = populateBudgetRule();
				budgetRule.setRuleTrackingId(existingBudgetRule.getRuleTrackingId());
				if(!budgetRule.getIsRoFile()) {
					budgetRule.setIsRoFile(existingBudgetRule.getIsRoFile());
				}
				long ruleId = budgetRuleService.saveBudgetRule(budgetRule);
				setRuleId(ruleId);
			}
		}
		
		return "Success";
	}

	private String validateOverlaping(BudgetRule existingBudgetRule) {
		LOGGER.info("Validating overlaping for name: " + getName());
		StringBuilder messageBuilder = new StringBuilder();
		if (getRuleType().equals(BudgetRuleType.SUPC_VENDOR.getRuleType())) {
			String[] vendors = getVendor().split(VENDOR_SAPERATER);
			List<String> vendorList = new ArrayList<>();
			for (String vendor : vendors) {
				vendorList.add(vendor);
			}
			List<BudgetRuleSupcVendor> scheduledSupcVendorRules = budgetRuleService.getScheduledBudgetRuleSupcVendor(getSupc(), vendorList);
			if (null != scheduledSupcVendorRules && !scheduledSupcVendorRules.isEmpty()) {
				if (null != existingBudgetRule) {
					for (Iterator<BudgetRuleSupcVendor> iterator = scheduledSupcVendorRules.iterator(); iterator.hasNext();) {
						BudgetRuleSupcVendor budgetRuleSupcVendor = iterator.next();
						if (budgetRuleSupcVendor.getRuleTrackingId().equals(existingBudgetRule.getRuleTrackingId())) {
							iterator.remove();
						}
					}
				}

				for (BudgetRuleSupcVendor budgetRuleSupcVendor : scheduledSupcVendorRules) {
					if (budgetRuleService.isOverlapingTime(getStartTimeStamp(), getEndTimeStamp(), new Timestamp(budgetRuleSupcVendor.getStartTime().getMillis()),
							new Timestamp(budgetRuleSupcVendor.getEndTime().getMillis()))) {
						messageBuilder.append(budgetRuleSupcVendor.getSupc()).append(VENDOR_SAPERATER).append(budgetRuleSupcVendor.getVendorCode())
								.append("\n");
					}
				}
			}
		} else {
			String[] vendors = getVendor().split(VENDOR_SAPERATER);
			List<String> vendorList = new ArrayList<>();
			for (String vendor : vendors) {
				vendorList.add(vendor);
			}
			List<BudgetRuleVendorBrand> scheduledVendorBrandRules = budgetRuleService.getScheduledBudgetRuleVendorBrand(getBrand(), vendorList);
			if (null != scheduledVendorBrandRules && !scheduledVendorBrandRules.isEmpty()) {
				if (null != existingBudgetRule) {
					for (Iterator<BudgetRuleVendorBrand> iterator = scheduledVendorBrandRules.iterator(); iterator.hasNext();) {
						BudgetRuleVendorBrand budgetRuleVendorBrand = iterator.next();
						if (budgetRuleVendorBrand.getRuleTrackingId().equals(existingBudgetRule.getRuleTrackingId())) {
							iterator.remove();
						}
					}
				}

				for (BudgetRuleVendorBrand budgetRuleVendorBrand : scheduledVendorBrandRules) {
					if (budgetRuleService.isOverlapingTime(getStartTimeStamp(), getEndTimeStamp(), new Timestamp(budgetRuleVendorBrand.getStartTime().getMillis()),
							new Timestamp(budgetRuleVendorBrand.getEndTime().getMillis()))) {
						messageBuilder.append(budgetRuleVendorBrand.getBrandId()).append(VENDOR_SAPERATER)
								.append(budgetRuleVendorBrand.getVendorCode()).append("\n");
					}
				}
			}
		}
		return messageBuilder.toString();
	}

	private String editRule(BudgetRule existingRule) {
		try {
			BudgetRule budgetRule = populateBudgetRule();
			if(!budgetRule.getIsRoFile()) {
				budgetRule.setIsRoFile(existingRule.getIsRoFile());
			}
			budgetRule.setEditor(getUser().getEmail());
			budgetRule.setId(getRuleId());
			if (getRuleType().equals(BudgetRuleType.SUPC_VENDOR.getRuleType())) {
				LOGGER.info("Going to edit supc vendor budget rule");
				BudgetRuleTemplate<BudgetRuleSupcVendorMapping> existingBudgetRule = budgetRuleService.getSupcVenorBudgetRuleById(getRuleId());
				if (null != existingBudgetRule || null != existingBudgetRule.getBudgetRule()
						|| null != existingBudgetRule.getBudgetRuleFilterMapping()) {
					budgetRule.setCreator(existingBudgetRule.getBudgetRule().getCreator());
					List<BudgetRuleSupcVendorMapping> supcVendorBudgetRules = populateSupcVendorBudgetRules();
					BudgetRuleTemplate<BudgetRuleSupcVendorMapping> newBudgetRule = new BudgetRuleTemplate<>();
					newBudgetRule.setBudgetRule(budgetRule);
					newBudgetRule.setBudgetRuleFilterMapping(supcVendorBudgetRules);
					budgetRuleService.editSupcVendorBudgetRule(existingBudgetRule, newBudgetRule);
					budgetRuleScheduleService.deleteScheduleRule(getRuleId(), existingBudgetRule.getBudgetRule().getRuleType());
				} else {
					LOGGER.warn("Existing rule not found to edit");
				}
			} else {
				LOGGER.info("Going to edit vendor brand budget rule");
				BudgetRuleTemplate<BudgetRuleVendorBrandMapping> existingBudgetRule = budgetRuleService.getVenorBrandBudgetRuleById(getRuleId());
				if (null != existingBudgetRule || null != existingBudgetRule.getBudgetRule()
						|| null != existingBudgetRule.getBudgetRuleFilterMapping()) {
					budgetRule.setCreator(existingBudgetRule.getBudgetRule().getCreator());
					List<BudgetRuleVendorBrandMapping> vendorBrandBudgetRules = populateVendorBrandBudgetRules();
					BudgetRuleTemplate<BudgetRuleVendorBrandMapping> newBudgetRule = new BudgetRuleTemplate<>();
					newBudgetRule.setBudgetRule(budgetRule);
					newBudgetRule.setBudgetRuleFilterMapping(vendorBrandBudgetRules);
					budgetRuleService.editVendorBrandBudgetRule(existingBudgetRule, newBudgetRule);
					budgetRuleScheduleService.deleteScheduleRule(getRuleId(), existingBudgetRule.getBudgetRule().getRuleType());
				} else {
					LOGGER.warn("Existing rule not found to edit");
				}

			}
		} catch (Exception e) {
			LOGGER.error("Caught exception while editing budget rule");
			return "Internal error";
		}
		return null;
	}

	private long createRule() {
		long ruleId = 0;
		try {
			if (getRuleType().equals(BudgetRuleType.SUPC_VENDOR.getRuleType())) {
				LOGGER.info("Found valid request for budget name: " + getName());
				BudgetRule budgetRule = populateBudgetRule();
				List<BudgetRuleSupcVendorMapping> supcVendorBudgetRules = populateSupcVendorBudgetRules();
				ruleId = budgetRuleService.createSupcVendorBudgetRule(budgetRule, supcVendorBudgetRules);
			} else {
				LOGGER.info("Found valid request for budget name: " + getName());
				BudgetRule budgetRule = populateBudgetRule();
				List<BudgetRuleVendorBrandMapping> vendorBrandBudgetRules = populateVendorBrandBudgetRules();
				ruleId = budgetRuleService.createVendorBrandBudgetRule(budgetRule, vendorBrandBudgetRules);
			}
		} catch (Exception e) {
			LOGGER.info("Caught exception while creating budget rule {}", e);
		}
		return ruleId;
	}

	private boolean validateRequest() {
		LOGGER.info("Validating request for budget name: " + getName());
		if (getRuleType().equals(BudgetRuleType.SUPC_VENDOR.getRuleType())) {
			if (null == getSupc() || getSupc().isEmpty()) {
				return false;
			}
		} else if (getRuleType().equals(BudgetRuleType.VENDOR_BRAND.getRuleType())) {
			if (null == getBrand() || 0 == getBrand()) {
				return false;
			}
		} else {
			return false;
		}
		return true;
	}

	private BudgetRule populateBudgetRule() {
		BudgetRule budgetRule = new BudgetRule();
		budgetRule.setName(getName());
		budgetRule.setRo(getPro());
		budgetRule.setRuleType(BudgetRuleType.getBudgetRuleTypeByString(getRuleType()));
		budgetRule.setBudget(getBudget());
		budgetRule.setSaleTarget(getSaleTarget());
		budgetRule.setGsvTarget(getGsvTarget());
		budgetRule.setStartTime(new DateTime(getStartTimeStamp().getTime()));
		budgetRule.setEndTime(new DateTime(getEndTimeStamp().getTime()));
		budgetRule.setCreator(getUser().getEmail());
		if (!StringUtils.isEmpty(getFileName()))
			budgetRule.setIsRoFile(true);
		else
			budgetRule.setIsRoFile(false);
		return budgetRule;
	}

	private List<BudgetRuleSupcVendorMapping> populateSupcVendorBudgetRules() {
		List<BudgetRuleSupcVendorMapping> supcVendorBudgetRules = new ArrayList<>();
		String[] vendors = getVendor().split(VENDOR_SAPERATER);
		for (String vendor : vendors) {
			BudgetRuleSupcVendorMapping supcVendorBudgetRule = new BudgetRuleSupcVendorMapping();
			supcVendorBudgetRule.setSupc(getSupc());
			supcVendorBudgetRule.setVendor(vendor);
			supcVendorBudgetRules.add(supcVendorBudgetRule);
		}
		return supcVendorBudgetRules;
	}

	private List<BudgetRuleVendorBrandMapping> populateVendorBrandBudgetRules() {
		List<BudgetRuleVendorBrandMapping> vendorBrandBudgetRules = new ArrayList<>();
		String[] vendors = getVendor().split(VENDOR_SAPERATER);
		for (String vendor : vendors) {
			BudgetRuleVendorBrandMapping vendorBrandBudgetRule = new BudgetRuleVendorBrandMapping();
			vendorBrandBudgetRule.setBrand(getBrand());
			vendorBrandBudgetRule.setVendor(vendor);
			vendorBrandBudgetRules.add(vendorBrandBudgetRule);
		}
		return vendorBrandBudgetRules;
	}

	private void populateActionParameters() {
		if (getRuleType().equals(BudgetRuleType.SUPC_VENDOR.getRuleType())) {
			BudgetRuleTemplate<BudgetRuleSupcVendorMapping> supcVendorBudgetRule = budgetRuleService.getSupcVenorBudgetRuleById(getRuleId());
			populateActionParameters(supcVendorBudgetRule);
		} else {
			BudgetRuleTemplate<BudgetRuleVendorBrandMapping> vendorBrandBudgetRule = budgetRuleService.getVenorBrandBudgetRuleById(getRuleId());
			populateActionParameters(vendorBrandBudgetRule);
		}
	}
	
	private <T> void populateActionParameters(BudgetRuleTemplate<T> budgetRuleTemplate) {
		LOGGER.info("Populating action parameters");
		try{
			BudgetRule budgetRule = budgetRuleTemplate.getBudgetRule();
			setRuleId(budgetRule.getId());
			setRuleType(budgetRule.getRuleType().getRuleType());
			setName(budgetRule.getName());
			setPro(budgetRule.getRo());
			setBudget(budgetRule.getBudget());
			setSaleTarget(budgetRule.getSaleTarget());
			setGsvTarget(budgetRule.getGsvTarget());
			setStartTime(changeDateFarmate(budgetRule.getStartTime()));
			setEndTime(changeDateFarmate(budgetRule.getEndTime().toString()));
			String supc = null;
			Integer brand = null;
			StringBuilder vendorBuilder = new StringBuilder();
			if (null != budgetRuleTemplate.getBudgetRuleFilterMapping() && !budgetRuleTemplate.getBudgetRuleFilterMapping().isEmpty()) {
				if (budgetRuleTemplate.getBudgetRuleFilterMapping().get(0) instanceof BudgetRuleSupcVendorMapping) {
					List<T> svMapping = budgetRuleTemplate.getBudgetRuleFilterMapping();
					for (T m : svMapping) {
						BudgetRuleSupcVendorMapping sv = (BudgetRuleSupcVendorMapping) m;
						supc = sv.getSupc();
						vendorBuilder.append(sv.getVendor()).append(VENDOR_SAPERATER);
					}
				} else {
					List<T> svMapping = budgetRuleTemplate.getBudgetRuleFilterMapping();
					for (T m : svMapping) {
						BudgetRuleVendorBrandMapping vb = (BudgetRuleVendorBrandMapping) m;
						brand = vb.getBrand();
						vendorBuilder.append(vb.getVendor()).append(VENDOR_SAPERATER);
					}
				}
				setSupc(supc);
				setBrand(brand);
				setVendor(vendorBuilder.toString().substring(0, vendorBuilder.toString().length() - 1));
				setIsRoFile(budgetRule.getIsRoFile());
			} else {
				LOGGER.warn("Didn't found product mapping for rule id: {}", budgetRule.getId());
			}
			setStatus(budgetRule.getStatus());
		} catch (Exception e) {
			LOGGER.error("Caught while populating action parameter {}", e);
		}
		LOGGER.info("Populated action parameters");
	}
	
	public Timestamp getStartTimeStamp() {
		Timestamp startTimeStamp = new Timestamp(DateParser.toDate(getStartTime()).getTime());
		return startTimeStamp;
	}

	public Timestamp getEndTimeStamp() {
		Timestamp endTimeStamp = new Timestamp(DateParser.toDate(getEndTime()).getTime());
		return endTimeStamp;
	}

	private String changeDateFarmate(String date) {
		LOGGER.info("Changing date farmat of {}", date);
		return date.substring(0, 19).replace("T", " ").replace("-", "/");
	}

	private String changeDateFarmate(DateTime date) {
		LOGGER.info("Changing date farmat of {}", date);
		Timestamp time = new Timestamp(date.getMillis());
		String dtime = time.toString();
		return dtime.substring(0, 19).replace("-", "/");
	}
	
	public Long getRuleId() {
		return ruleId;
	}

	public void setRuleId(Long ruleId) {
		this.ruleId = ruleId;
	}

	public Long getRuleTrackingId() {
		return ruleTrackingId;
	}

	public void setRuleTrackingId(Long ruleTrackingId) {
		this.ruleTrackingId = ruleTrackingId;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getPro() {
		return pro;
	}

	public void setPro(String pro) {
		this.pro = pro;
	}

	public String getRuleType() {
		return ruleType;
	}

	public void setRuleType(String ruleType) {
		this.ruleType = ruleType;
	}

	public String getSupc() {
		return supc;
	}

	public void setSupc(String supc) {
		this.supc = supc;
	}

	public String getVendor() {
		return vendor;
	}

	public void setVendor(String vendor) {
		this.vendor = vendor;
	}

	public Long getBudget() {
		return budget;
	}

	public void setBudget(Long budget) {
		this.budget = budget;
	}

	public Long getSaleTarget() {
		return saleTarget;
	}

	public void setSaleTarget(Long saleTarget) {
		this.saleTarget = saleTarget;
	}

	public Long getGsvTarget() {
		return gsvTarget;
	}

	public void setGsvTarget(Long gsvTarget) {
		this.gsvTarget = gsvTarget;
	}

	public String getStartTime() {
		return startTime;
	}

	public void setStartTime(String startTime) {
		this.startTime = startTime;
	}

	public String getEndTime() {
		return endTime;
	}

	public void setEndTime(String endTime) {
		this.endTime = endTime;
	}

	public Integer getBrand() {
		return brand;
	}

	public void setBrand(Integer brand) {
		this.brand = brand;
	}

	public String getUserAction() {
		return userAction;
	}

	public void setUserAction(String userAction) {
		this.userAction = userAction;
	}

	public Integer getStatus() {
		return status;
	}

	public void setStatus(Integer status) {
		this.status = status;
	}
	
	public File getFile() {
		return file;
	}

	public void setFile(File file) {
		this.file = file;
	}

	public String getFileName() {
		return fileName;
	}

	public void setFileName(String fileName) {
		this.fileName = fileName;
	}

	public File getFiledownload() {
		return filedownload;
	}

	public void setFiledownload(File filedownload) {
		this.filedownload = filedownload;
	}

	public InputStream getInputStream() {
		return inputStream;
	}

	public void setInputStream(InputStream inputStream) {
		this.inputStream = inputStream;
	}

	public Boolean getIsRoFile() {
		return isRoFile;
	}

	public void setIsRoFile(Boolean isRoFile) {
		this.isRoFile = isRoFile;
	}

}
