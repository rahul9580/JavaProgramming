/**
 * 
 */
package com.snapdeal.ptdashboard.service.impl;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.snapdeal.monetization.base.emailEngine.bean.EmailSummary;
import com.snapdeal.monetization.base.emailEngine.service.EmailEngineService;
import com.snapdeal.ptdashboard.cache.SummaryCache;
import com.snapdeal.ptdashboard.common.PTDashboardConstants;
import com.snapdeal.ptdashboard.dao.SPInvokerDao;
import com.snapdeal.ptdashboard.service.SPInvokerService;

/** Service Implementation for SP Invoker.
 * @author lokendrap
 *
 */

@Service
public class SPInvokerServiceImpl implements SPInvokerService {


	@Autowired
	private SPInvokerDao spInvokerDao;

	@Autowired
	private SummaryCache summaryCache;

	@Autowired
	EmailEngineService emailEngineService;

	private static final Logger LOGGER = LoggerFactory.getLogger(SPInvokerServiceImpl.class);

	@Override
	public void invokeCompPriceStoredProc() {
		try{
			spInvokerDao.invokeDailyReportStoredProc();
			//spInvokerDao.invokeDailyShipNearBurmStoredProc();
			updateSummaryCache();
//			spInvokerDao.fillSupcSubcatData();
			sendMailAlert("Subject: Succesfuly completed LMH stored Proc");
		}
		catch(Exception e){
			LOGGER.error("Exception in invokeCompPriceStoredProc",e);
			sendMailAlert(e.getMessage());
			//summaryCache.setCacheState(PTDashboardConstants.CACHE_UNHEALTHY);
		}

	}



	private void sendMailAlert(String message) {
		try{
			String key="dashboard.alert";
			EmailSummary emailSummary=spInvokerDao.getMailProperties(emailEngineService,key);
			emailSummary.setEmailContent(message.indexOf("#Body:")==-1?" ":message.substring(message.indexOf("#Body:"),message.length()-1));
			emailSummary.setEmailContent(emailSummary.getEmailContent().replaceFirst("#Body:", ""));
			emailSummary.setSubject(message.indexOf("Subject:")==-1?" ":message.indexOf("#Body:")==-1?message.substring(message.indexOf("Subject:"),message.length()-1):message.substring(message.indexOf("Subject:"),message.indexOf("#Body:")-1));
			emailSummary.setSubject(emailSummary.getSubject().replaceFirst("Subject:", ""));
			emailEngineService.sendMail(emailSummary);
		}
		catch(Exception e){
			LOGGER.error("Unable to Send Mail" + e);
		}

	}



	@Override
	public void updateSummaryCache() {
		try {
			summaryCache.setCacheState(PTDashboardConstants.CACHE_UNHEALTHY);
			LOGGER.info("Cache marked unhealthy");
			String invalidateResult=summaryCache.invalidatePreviousDayEntries();//30 day
			String populateResult=summaryCache.populateSummaryCache();//
			if(invalidateResult.equals(PTDashboardConstants.SUCCESS)&&populateResult.equals(PTDashboardConstants.SUCCESS)){
				LOGGER.info("Cache marked healthy");
				summaryCache.setCacheState(PTDashboardConstants.CACHE_HEALTHY);
			}else{
				LOGGER.info("Cache marked unhealthy");
				summaryCache.setCacheState(PTDashboardConstants.CACHE_UNHEALTHY);
			}
		} catch(Exception e){
			LOGGER.error("Exception in updateSummaryCache : ",e);
			summaryCache.setCacheState(PTDashboardConstants.CACHE_UNHEALTHY);
		}
	}


}
