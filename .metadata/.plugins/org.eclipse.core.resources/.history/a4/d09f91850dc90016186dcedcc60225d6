/**
 * 
 */
package com.snapdeal.monetization.budget.action;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

import com.snapdeal.monetization.budget.pojo.BudgetRule;
import com.snapdeal.monetization.budget.pojo.BudgetRuleSupcVendor;
import com.snapdeal.monetization.budget.pojo.BudgetRuleSupcVendorMapping;
import com.snapdeal.monetization.budget.pojo.BudgetRuleTemplate;
import com.snapdeal.monetization.budget.pojo.BudgetRuleType;
import com.snapdeal.monetization.budget.pojo.BudgetRuleVendorBrand;
import com.snapdeal.monetization.budget.pojo.BudgetRuleVendorBrandMapping;
import com.snapdeal.monetization.budget.pojo.BudgetTrackingInfo;
import com.snapdeal.monetization.budget.service.BudgetRuleService;
import com.snapdeal.monetization.budget.service.BudgetTrackingService;
import com.snapdeal.monetization.ps.constant.Constants;

import action.Action;
import utility.DateParser;
import utility.Page;

/**
 * @author rahul.kumar05
 *
 */
public class BudgetRuleAction extends Action {

	private static final Logger		LOGGER				= LoggerFactory.getLogger(BudgetRuleAction.class);

	private static final String		VENDOR_SAPERATER	= ",";

	@Autowired
	private BudgetRuleService		budgetRuleService;

	@Autowired
	private BudgetTrackingService	budgetTrackingService;

	private Long					ruleId;
	private Long					ruleTrackingId;
	private String					name;
	private String					pro;
	private String					ruleType;
	private String					supc;
	private String					vendor;
	private String					brand;
	private Long					budget;
	private Long					saleTarget;
	private Long					gsvTarget;
	private String					startTime;
	private String					endTime;
	private String					userAction;

	public String execute() throws Exception {
		if (!userCheck()) {
			return Page.LoginPage;
		}

		operate();
		return Page.ActivityPage;
	}

	private String operate() {
		if(null == getName() && !"view".equalsIgnoreCase(getUserAction())) {
			return "Sucess";
		}
		if("view".equalsIgnoreCase(getUserAction())) {
			LOGGER.info("Got request to fetch rule for ruleId: {}", getRuleId());
			if(getRuleType().equals(BudgetRuleType.SUPC_VENDOR.name())) {
				BudgetRuleTemplate<BudgetRuleSupcVendorMapping> supcVendorBudgetRule = budgetRuleService.getSupcVenorBudgetRuleById(getRuleId());
				populateActionParameters(supcVendorBudgetRule);
			} else {
				BudgetRuleTemplate<BudgetRuleVendorBrandMapping> vendorBrandBudgetRule = budgetRuleService.getVenorBrandBudgetRuleById(getRuleId());
				populateActionParameters(vendorBrandBudgetRule);
			}
			return "Success";
		} else if (null == getRuleId()) {
			if (!validateRequest()) {
				LOGGER.warn("Invalid rule type found for rule: " + getName());
				return "Invalid rule type in request";
			}
			String validateOverlapingMsg = validateOverlaping();
			if (null != validateOverlapingMsg && !validateOverlapingMsg.isEmpty()) {
				return validateOverlapingMsg;
			}
			String createMsg = createRule();
			if (null != createMsg && createMsg.isEmpty()) {
				return createMsg;
			} else
				return "success";
		} else {
			return validateAndEditRule();
		}
	}

	/* Returns error message */
	private String validateAndEditRule() {
		BudgetRule existingBudgetRule = budgetRuleService.getBudgetRuleById(getRuleId());
		if (existingBudgetRule.getStatus() == Constants.BudgetStatus.CREATED || existingBudgetRule.getStatus() == Constants.BudgetStatus.STARTED
				|| existingBudgetRule.getStatus() == Constants.BudgetStatus.APPROVED) {
			LOGGER.info("Rule is not live yet, can edit anything");
			editRule();
		} else if (!existingBudgetRule.getStartTime().equals(getStartTimeStamp())) {
			LOGGER.info("Rule is live and changing start date");
			return "Error: Can't change start date of live rule";
		} else {
			if (!existingBudgetRule.getEndTime().equals(getEndTimeStamp())) {
				LOGGER.info("Rule is active and editing end date, Do validate");
				String validateOverlapingMsg = validateOverlaping();
				if (null != validateOverlapingMsg && !validateOverlapingMsg.isEmpty()) {
					return validateOverlapingMsg;
				}
			}

			/*if (getBudget() < existingBudgetRule.getBudget()) {
				BudgetTrackingInfo budgetTrackingInfo = budgetTrackingService.getBudgetWithSpent(existingBudgetRule.getRuleTrackingId());
				if (getBudget() <= budgetTrackingInfo.getBudgetSpent()) {
					LOGGER.info("New budget is less than spent budget");
					return "Error! New budget is less than spent budget";
				}
			}*/
			BudgetRule budgetRule = populateBudgetRule();
			budgetRule.setRuleTrackingId(existingBudgetRule.getRuleTrackingId());
			budgetRuleService.saveBudgetRule(budgetRule);
		}
		return "Success";
	}

	private String validateOverlaping() {
		LOGGER.info("Validating overlaping for name: " + getName());
		StringBuilder messageBuilder = new StringBuilder();
		if (getRuleType().equals(BudgetRuleType.SUPC_VENDOR.getRuleType())) {
			String[] vendors = getVendor().split(VENDOR_SAPERATER);
			List<String> vendorList = new ArrayList<>();
			for (String vendor : vendors) {
				vendorList.add(vendor);
			}
			List<BudgetRuleSupcVendor> scheduledSupcVendorRules = budgetRuleService.getScheduledBudgetRuleSupcVendor(getSupc(), vendorList);
			if (null != scheduledSupcVendorRules && !scheduledSupcVendorRules.isEmpty()) {
				if (null != getRuleId()) {
					for (Iterator<BudgetRuleSupcVendor> iterator = scheduledSupcVendorRules.iterator(); iterator.hasNext();) {
						BudgetRuleSupcVendor budgetRuleSupcVendor = iterator.next();
						if (budgetRuleSupcVendor.getRuleTrackingId().equals(getRuleTrackingId())) {
							iterator.remove();
						}
					}
				}

				for (BudgetRuleSupcVendor budgetRuleSupcVendor : scheduledSupcVendorRules) {
					if (budgetRuleService.isOverlapingTime(getStartTimeStamp(), getEndTimeStamp(), budgetRuleSupcVendor.getStartTime(),
							budgetRuleSupcVendor.getEndTime())) {
						messageBuilder.append(budgetRuleSupcVendor.getSupc()).append(VENDOR_SAPERATER).append(budgetRuleSupcVendor.getVendorCode());
					}
				}
			}
		} else {
			String[] vendors = getVendor().split(VENDOR_SAPERATER);
			List<String> vendorList = new ArrayList<>();
			for (String vendor : vendors) {
				vendorList.add(vendor);
			}
			List<BudgetRuleVendorBrand> scheduledVendorBrandRules = budgetRuleService.getScheduledBudgetRuleVendorBrand(getBrand(), vendorList);
			if (null != scheduledVendorBrandRules && !scheduledVendorBrandRules.isEmpty()) {
				if (null != getRuleId()) {
					for (Iterator<BudgetRuleVendorBrand> iterator = scheduledVendorBrandRules.iterator(); iterator.hasNext();) {
						BudgetRuleVendorBrand budgetRuleVendorBrand = iterator.next();
						if (budgetRuleVendorBrand.getRuleTrackingId().equals(getRuleTrackingId())) {
							iterator.remove();
						}
					}
				}

				for (BudgetRuleVendorBrand budgetRuleVendorBrand : scheduledVendorBrandRules) {
					if (budgetRuleService.isOverlapingTime(getStartTimeStamp(), getEndTimeStamp(), budgetRuleVendorBrand.getStartTime(),
							budgetRuleVendorBrand.getEndTime())) {
						messageBuilder.append(budgetRuleVendorBrand.getBrandId()).append(VENDOR_SAPERATER)
								.append(budgetRuleVendorBrand.getVendorCode());
					}
				}
			}
		}
		return messageBuilder.toString();
	}

	private void editRule() {
		BudgetRule budgetRule = populateBudgetRule();
		budgetRule.setEditor(getUser().getEmail());
		budgetRule.setId(getRuleId());
		if (getRuleType().equals(BudgetRuleType.SUPC_VENDOR.getRuleType())) {
			LOGGER.info("Going to edit supc vendor budget rule");
			BudgetRuleTemplate<BudgetRuleSupcVendorMapping> existingBudgetRule = budgetRuleService.getSupcVenorBudgetRuleById(getRuleId());
			if (null != existingBudgetRule || null != existingBudgetRule.getBudgetRule() || null != existingBudgetRule.getBudgetRuleFilterMapping()) {
				budgetRule.setCreator(existingBudgetRule.getBudgetRule().getCreator());
				List<BudgetRuleSupcVendorMapping> supcVendorBudgetRules = populateSupcVendorBudgetRules();
				BudgetRuleTemplate<BudgetRuleSupcVendorMapping> newBudgetRule = new BudgetRuleTemplate<>();
				newBudgetRule.setBudgetRule(budgetRule);
				newBudgetRule.setBudgetRuleFilterMapping(supcVendorBudgetRules);
				budgetRuleService.editSupcVendorBudgetRule(existingBudgetRule, newBudgetRule);
			} else {
				LOGGER.warn("Existing rule not found to edit");
			}
		} else {
			LOGGER.info("Going to edit vendor brand budget rule");
			BudgetRuleTemplate<BudgetRuleVendorBrandMapping> existingBudgetRule = budgetRuleService.getVenorBrandBudgetRuleById(getRuleId());
			if (null != existingBudgetRule || null != existingBudgetRule.getBudgetRule() || null != existingBudgetRule.getBudgetRuleFilterMapping()) {
				budgetRule.setCreator(existingBudgetRule.getBudgetRule().getCreator());
				List<BudgetRuleVendorBrandMapping> vendorBrandBudgetRules = populateVendorBrandBudgetRules();
				BudgetRuleTemplate<BudgetRuleVendorBrandMapping> newBudgetRule = new BudgetRuleTemplate<>();
				newBudgetRule.setBudgetRule(budgetRule);
				newBudgetRule.setBudgetRuleFilterMapping(vendorBrandBudgetRules);
				budgetRuleService.editVendorBrandBudgetRule(existingBudgetRule, newBudgetRule);
			} else {
				LOGGER.warn("Existing rule not found to edit");
			}

		}
	}

	/* Returns error message */
	private String createRule() {
		if (getRuleType().equals(BudgetRuleType.SUPC_VENDOR.getRuleType())) {
			LOGGER.info("Found valid request for budget name: " + getName());
			BudgetRule budgetRule = populateBudgetRule();
			List<BudgetRuleSupcVendorMapping> supcVendorBudgetRules = populateSupcVendorBudgetRules();
			budgetRuleService.createSupcVendorBudgetRule(budgetRule, supcVendorBudgetRules);
		} else {
			LOGGER.info("Found valid request for budget name: " + getName());
			BudgetRule budgetRule = populateBudgetRule();
			List<BudgetRuleVendorBrandMapping> vendorBrandBudgetRules = populateVendorBrandBudgetRules();
			budgetRuleService.createVendorBrandBudgetRule(budgetRule, vendorBrandBudgetRules);
		}
		return null;
	}

	private boolean validateRequest() {
		LOGGER.info("Validating request for budget name: " + getName());
		if (getRuleType().equals(BudgetRuleType.SUPC_VENDOR.getRuleType())) {
			if (null == getSupc() || getSupc().isEmpty()) {
				return false;
			}
		} else if (getRuleType().toString().equals(BudgetRuleType.VENDOR_BRAND.getRuleType())) {
			if (null == getBrand() || getBrand().isEmpty()) {
				return false;
			}
		} else {
			return false;
		}
		return true;
	}

	private BudgetRule populateBudgetRule() {
		BudgetRule budgetRule = new BudgetRule();
		budgetRule.setName(getName());
		budgetRule.setRo(getPro());
		budgetRule.setRuleType(BudgetRuleType.getBudgetRuleTypeByString(getRuleType()));
		budgetRule.setBudget(getBudget());
		budgetRule.setSaleTarget(getSaleTarget());
		budgetRule.setGsvTarget(getGsvTarget());
		budgetRule.setStartTime(getStartTimeStamp());
		budgetRule.setEndTime(getEndTimeStamp());
		budgetRule.setCreator(getUser().getEmail());
		return budgetRule;
	}

	private List<BudgetRuleSupcVendorMapping> populateSupcVendorBudgetRules() {
		List<BudgetRuleSupcVendorMapping> supcVendorBudgetRules = new ArrayList<>();
		String[] vendors = getVendor().split(VENDOR_SAPERATER);
		for (String vendor : vendors) {
			BudgetRuleSupcVendorMapping supcVendorBudgetRule = new BudgetRuleSupcVendorMapping();
			supcVendorBudgetRule.setSupc(getSupc());
			supcVendorBudgetRule.setVendor(vendor);
			supcVendorBudgetRules.add(supcVendorBudgetRule);
		}
		return supcVendorBudgetRules;
	}

	private List<BudgetRuleVendorBrandMapping> populateVendorBrandBudgetRules() {
		List<BudgetRuleVendorBrandMapping> vendorBrandBudgetRules = new ArrayList<>();
		String[] vendors = getVendor().split(VENDOR_SAPERATER);
		for (String vendor : vendors) {
			BudgetRuleVendorBrandMapping vendorBrandBudgetRule = new BudgetRuleVendorBrandMapping();
			vendorBrandBudgetRule.setBarnd(getBrand());
			vendorBrandBudgetRule.setVendor(vendor);
			vendorBrandBudgetRules.add(vendorBrandBudgetRule);
		}
		return vendorBrandBudgetRules;
	}

	private <T> void populateActionParameters(BudgetRuleTemplate<T> budgetRuleTemplate) {
		BudgetRule budgetRule = budgetRuleTemplate.getBudgetRule();
		setRuleId(budgetRule.getId());
		setRuleType(budgetRule.getRuleType().getRuleType());
		setName(budgetRule.getName());
		setPro(budgetRule.getRo());
		setBudget(budgetRule.getBudget());
		setSaleTarget(budgetRule.getSaleTarget());
		setGsvTarget(budgetRule.getGsvTarget());
		setStartTime(changeDateFarmate(budgetRule.getStartTime().toString()));
		setEndTime(changeDateFarmate(budgetRule.getEndTime().toString()));
		String supc = null;
		String brand = null;
		StringBuilder vendorBuilder = new StringBuilder();
		if (null != budgetRuleTemplate.getBudgetRuleFilterMapping()) {
			if (budgetRuleTemplate.getBudgetRuleFilterMapping().get(0) instanceof BudgetRuleSupcVendorMapping) {
				List<T> svMapping = budgetRuleTemplate.getBudgetRuleFilterMapping();
				for (T m : svMapping) {
					BudgetRuleSupcVendorMapping sv = (BudgetRuleSupcVendorMapping) m;
					supc = sv.getSupc();
					vendorBuilder.append(sv.getVendor()).append(VENDOR_SAPERATER);
				}
			} else {
				List<T> svMapping = budgetRuleTemplate.getBudgetRuleFilterMapping();
				for (T m : svMapping) {
					BudgetRuleVendorBrandMapping vb = (BudgetRuleVendorBrandMapping) m;
					brand = vb.getBarnd();
					vendorBuilder.append(vb.getVendor()).append(VENDOR_SAPERATER);
				}
			}
			setSupc(supc);
			setBrand(brand);
			setVendor(vendorBuilder.toString().substring(0, vendorBuilder.toString().length() - 1));
		} else {
			LOGGER.warn("Didn't found product mapping for rule id: {}", budgetRule.getId());
		}
	}

	public Timestamp getStartTimeStamp() {
		Timestamp startTimeStamp = new Timestamp(DateParser.toDate(getStartTime()).getTime());
		return startTimeStamp;
	}

	public Timestamp getEndTimeStamp() {
		Timestamp endTimeStamp = new Timestamp(DateParser.toDate(getEndTime()).getTime());
		return endTimeStamp;
	}
	
	private String changeDateFarmate(String date) {
		return date.substring(0, date.length() - 2).replace("-", "/");
	}
	
	public Long getRuleId() {
		return ruleId;
	}

	public void setRuleId(Long ruleId) {
		this.ruleId = ruleId;
	}

	public Long getRuleTrackingId() {
		return ruleTrackingId;
	}

	public void setRuleTrackingId(Long ruleTrackingId) {
		this.ruleTrackingId = ruleTrackingId;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getPro() {
		return pro;
	}

	public void setPro(String pro) {
		this.pro = pro;
	}

	public String getRuleType() {
		return ruleType;
	}

	public void setRuleType(String ruleType) {
		this.ruleType = ruleType;
	}

	public String getSupc() {
		return supc;
	}

	public void setSupc(String supc) {
		this.supc = supc;
	}

	public String getVendor() {
		return vendor;
	}

	public void setVendor(String vendor) {
		this.vendor = vendor;
	}

	public Long getBudget() {
		return budget;
	}

	public void setBudget(Long budget) {
		this.budget = budget;
	}

	public Long getSaleTarget() {
		return saleTarget;
	}

	public void setSaleTarget(Long saleTarget) {
		this.saleTarget = saleTarget;
	}

	public Long getGsvTarget() {
		return gsvTarget;
	}

	public void setGsvTarget(Long gsvTarget) {
		this.gsvTarget = gsvTarget;
	}

	public String getStartTime() {
		return startTime;
	}

	public void setStartTime(String startTime) {
		this.startTime = startTime;
	}

	public String getEndTime() {
		return endTime;
	}

	public void setEndTime(String endTime) {
		this.endTime = endTime;
	}

	public String getBrand() {
		return brand;
	}

	public void setBrand(String brand) {
		this.brand = brand;
	}

	public String getUserAction() {
		return userAction;
	}

	public void setUserAction(String userAction) {
		this.userAction = userAction;
	}
	
}
