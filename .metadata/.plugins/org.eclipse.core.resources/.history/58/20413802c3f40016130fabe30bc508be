/**
 * 
 */
package ds.binarytree;

/**
 * @author rahul
 *
 */
public class BSTOperations {

	public int findSumOfNEleAfterKthSmallest(Node root, int k, int n, int counter, int sum) {
		if(root == null) {
			return 0;
		}
		findSumOfNEleAfterKthSmallest(root.getLeft(), k, n, counter, sum);
		counter++;
		if(counter >= k+n) {
			return sum;
		}
		if(counter > k) {
			sum += root.getData(); 
		}
		findSumOfNEleAfterKthSmallest(root.getLeft(), k, n, counter, sum);
		return sum;
	}
	
	 boolean canRepresentBST(int pre[], int n) {
	        // Create an empty stack
	        Stack<Integer> s = new Stack<Integer>();
	 
	        // Initialize current root as minimum possible
	        // value
	        int root = Integer.MIN_VALUE;
	 
	        // Traverse given array
	        for (int i = 0; i < n; i++) {
	            // If we find a node who is on right side
	            // and smaller than root, return false
	            if (pre[i] < root) {
	                return false;
	            }
	 
	            // If pre[i] is in right subtree of stack top,
	            // Keep removing items smaller than pre[i]
	            // and make the last removed item as new
	            // root.
	            while (!s.empty() && s.peek() < pre[i]) {
	                root = s.peek();
	                s.pop();
	            }
	 
	            // At this point either stack is empty or
	            // pre[i] is smaller than root, push pre[i]
	            s.push(pre[i]);
	        }
	        return true;
	    }
}
