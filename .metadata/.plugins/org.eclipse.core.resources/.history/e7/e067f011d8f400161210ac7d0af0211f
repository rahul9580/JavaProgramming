import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Stack;

public class Solution {
    
    public static void main(String[] args) throws Exception {
       /* BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.valueOf(br.readLine());
        
        for(int i = 0; i< T; i++) {
            int n = Integer.valueOf(br.readLine());
            String s = br.readLine();
            int pre[] = new int [n];
            String[] strArr = s.split(" ");
            for(int j = 0; j< n; j++) {
                pre[j] = Integer.valueOf(strArr[j]);
            }
            if(canRepresentBST(pre, n))
                System.out.println("YES");
            else
                System.out.println("NO");
        }*/
    	String[] s = new String[2];
    	s[1] = "{}[]()";
    	s[2] = "{[}]";
    }
    
    
    static String[] braces(String[] values) {
        String[] output = new String[values.length];
        int count = -1;
        for(String s : values) {
            count++;
            
            
            Stack<Character> stack = new Stack<Character>();
            for(int i = 0; i < s.length(); i++) {
                char c = s.charAt(i);
                switch(c) {
                    case '(':
                    case '{':
                    case '[':
                        stack.push(c);
                        break;
                    case ')': {
                        if(stack.isEmpty() || stack.pop() != '(') {
                            output[count] = "NO";
                        }
                        break;
                    }
                    case '}': {
                        if(stack.isEmpty() || stack.pop() != '{') {
                            output[count] = "NO";
                        }
                        break;
                    }
                     case ']': {
                        if(stack.isEmpty() || stack.pop() != '[') {
                            output[count] = "NO";
                        }
                        break;
                    }
                }
            }
            if(!stack.isEmpty())
                output[count] = "NO";
            else
                output[count] = "YES";
        }
        return output;
    }
   public static boolean  canRepresentBST(int pre[], int n) {
		Stack<Integer> s = new Stack<Integer>();
		int root = Integer.MIN_VALUE;

		for (int i = 0; i < n; i++) {
			if (pre[i] < root) {
				return false;
			}
			while (!s.empty() && s.peek() < pre[i]) {
				root = s.peek();
				s.pop();
			}
			s.push(pre[i]);
		}
		return true;
	}
}