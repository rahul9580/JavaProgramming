/**
 * 
 */
package com.snapdeal.monetization.budget.service;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.snapdeal.mail.client.model.EmailRequest;
import com.snapdeal.mail.client.model.FileAttachment;
import com.snapdeal.monetization.base.velocityEngine.IVelocityEngineService;
import com.snapdeal.monetization.budget.dao.BudgetTrackingDao;
import com.snapdeal.monetization.budget.pojo.BudgetRule;
import com.snapdeal.monetization.budget.pojo.BudgetRuleSupcVendorMapping;
import com.snapdeal.monetization.budget.pojo.BudgetRuleTemplate;
import com.snapdeal.monetization.budget.pojo.BudgetRuleType;
import com.snapdeal.monetization.budget.pojo.BudgetRuleVendorBrandMapping;
import com.snapdeal.monetization.budget.pojo.BudgetTrackingInfo;
import com.snapdeal.monetization.ps.cache.PsCacheManager;
import com.snapdeal.monetization.ps.constant.Constants;
import com.snapdeal.monetization.ps.service.EmailSenderManager;

/**
 * @author harsh.takkar
 *
 */
@Service
public class BudgetAlertService {

	private static Logger			log	= LoggerFactory.getLogger(BudgetAlertService.class);
	@Autowired
	private PsCacheManager			psCacheManager;
	@Autowired
	private EmailSenderManager		emailSenderManager;
	@Autowired
	private IVelocityEngineService	velocityEngineService;
	@Autowired
	private BudgetTrackingDao		budgetTrackingDao;

	public BudgetTrackingInfo checkAlertORWarningForRule(BudgetTrackingInfo budgetTrackingInfo) {

		try {
			double warnLimit = Double.parseDouble(psCacheManager.getCashbackConfigForkey(Constants.BatchCBConfiguration.BUDGET_WARN_LIMIT, "100.0")) * 100;
			double alertLimit = Double.parseDouble(psCacheManager.getCashbackConfigForkey(Constants.BatchCBConfiguration.BUDGET_ALERT_LIMIT, "100.0"))
					* 100;

			double spentPercent = budgetTrackingInfo.getSpentPercent();
			
			// Check if already warned before
			if (budgetTrackingInfo.isWarning()) {
				budgetTrackingInfo.setWarning(false);
			} else if (spentPercent > warnLimit) {
				log.info("Warning limit reached for rule: ", budgetTrackingInfo.getRuleTrackingId());
				budgetTrackingDao.setWarningInRuleTracking(budgetTrackingInfo.getRuleTrackingId());
				budgetTrackingInfo.setWarning(true);
			}
			if (spentPercent > alertLimit) {
				log.info("Alert limit reached for rule: ", budgetTrackingInfo.getRuleTrackingId());
				budgetTrackingInfo.setAlerting(true);
			}
			return budgetTrackingInfo;
		} catch (Exception e) {
			log.error("Exception ", e);
		}
		return budgetTrackingInfo;
	}

	public void sendAlert(BudgetRule budgetRule, BudgetTrackingInfo budgetTrackingInfo, Set<String> rfsEntries) {
		log.info("Going to send alert for ruleTrackingId: {}", budgetRule.getRuleTrackingId());
		try {
			Map<String, String> valueMap = getEmailDynamicDataMap(budgetRule, budgetTrackingInfo);
			List<String> rfsList = new ArrayList<>();
			EmailRequest emailRequest = new EmailRequest();
			if (null != rfsEntries && !rfsEntries.isEmpty()) {
				valueMap.put("RFSEntries", String.valueOf(rfsEntries.size()));
				rfsList.add(StringUtils.join(Constants.SUPC, Constants.COMMA, Constants.VENDOR_CODE));
				rfsList.addAll(rfsEntries);
				String rfsFileName = "/tmp/" + budgetRule.getName() + ".csv";
				FileUtils.writeLines(new File(rfsFileName), rfsList);
				emailRequest.addAttachment(new FileAttachment(rfsFileName));
			}
			String templatePath = getClass().getClassLoader().getResource("emailTemplates/budgetRuleAlertEmailTemplate.html").getPath();
			String htmlMessage = FileUtils.readFileToString(new File(templatePath));
			htmlMessage = velocityEngineService.replacePlaceHolders(htmlMessage, valueMap);

			emailRequest.setFromEmail(psCacheManager.getCashbackConfigForkey(Constants.BatchCBConfiguration.BUDGET_ALERT_FROM, "noreply@snapdeals.co.in"));
			emailRequest
					.setFromName(psCacheManager.getCashbackConfigForkey(Constants.BatchCBConfiguration.BUDGET_ALERT_FROM_NAME, "noreply@snapdeals.co.in"));
			emailRequest.setSubject("Monetization: " + budgetRule.getName() + " is expired");
			emailRequest.setHtmlContent(htmlMessage);
			emailRequest.setTriggerId(String.valueOf(budgetRule.getId()));
			emailRequest.setReplyToEmail("monetization-support@snapdeal.com");
			String sendTo = psCacheManager.getCashbackConfigForkey(Constants.BatchCBConfiguration.BUDGET_ALERT_TO, "");
			String[] sendToArray = sendTo.split(";");
			for (String to : sendToArray) {
				emailRequest.setTo(to);
				emailSenderManager.sendEmail(emailRequest);
			}
			
		} catch (Exception e) {
			log.error("Error while sending warning alert for {} - {}", budgetRule.getId(), ExceptionUtils.getStackTrace(e));
		}
	}

	public void sendWarn(BudgetRuleTemplate<?> budgetRuleTemplate, BudgetTrackingInfo budgetTrackingInfo) {
		log.info("Going to send warning for ruleTrackingId: {}", budgetRuleTemplate.getBudgetRule().getRuleTrackingId());
		try {
			log.info("Sending Warning for rule {}", budgetRuleTemplate.getBudgetRule());
			BudgetRule budgetRule = budgetRuleTemplate.getBudgetRule();
			String impactedEntries = getImpactedEntriesInRule(budgetRuleTemplate);
			Map<String, String> valueMap = getEmailDynamicDataMap(budgetRule, budgetTrackingInfo);
			valueMap.put("EntriesImpacted", impactedEntries);

			String templatePath = getClass().getClassLoader().getResource("emailTemplates/budgetRuleWarnEmailTemplate.html").getPath();

			String htmlMessage = FileUtils.readFileToString(new File(templatePath));
			htmlMessage = velocityEngineService.replacePlaceHolders(htmlMessage, valueMap);

			EmailRequest emailRequest = new EmailRequest();
			emailRequest.setFromEmail(psCacheManager.getCashbackConfigForkey(Constants.BatchCBConfiguration.BUDGET_ALERT_FROM, "noreply@snapdeals.co.in"));
			emailRequest
					.setFromName(psCacheManager.getCashbackConfigForkey(Constants.BatchCBConfiguration.BUDGET_ALERT_FROM_NAME, "noreply@snapdeals.co.in"));
			emailRequest.setSubject("Monetization: " + budgetRule.getName() + " is about to expire.");
			emailRequest.setHtmlContent(htmlMessage);
			emailRequest.setReplyToEmail("monetization-support@snapdeal.com");
			emailRequest.setTriggerId(String.valueOf(budgetRule.getId()));
			String sendTo = psCacheManager.getCashbackConfigForkey(Constants.BatchCBConfiguration.BUDGET_ALERT_TO, "");
			String[] sendToArray = sendTo.split(";");
			for (String to : sendToArray) {
				emailRequest.setTo(to);
				emailSenderManager.sendEmail(emailRequest);
			}
		} catch (Exception e) {
			log.error("Error while sending warning alert for {} - {}", budgetRuleTemplate.getBudgetRule().getId(), ExceptionUtils.getStackTrace(e));
		}
	}

	@SuppressWarnings("unchecked")
	private String getImpactedEntriesInRule(BudgetRuleTemplate<?> budgetRuleTemplate) {
		String impactedEntries = "";
		BudgetRule budgetRule = budgetRuleTemplate.getBudgetRule();
		if (BudgetRuleType.SUPC_VENDOR.equals(budgetRule.getRuleType())) {
			List<BudgetRuleSupcVendorMapping> budgetRuleSupcVendorMapping = (List<BudgetRuleSupcVendorMapping>) budgetRuleTemplate
					.getBudgetRuleFilterMapping();
			List<String> svMapping = new ArrayList<>();
			for (BudgetRuleSupcVendorMapping mapping : budgetRuleSupcVendorMapping) {
				svMapping.add(StringUtils.join(mapping.getSupc(), Constants.MtzBudget.RULE_SPLITTER, mapping.getVendor()));
			}
			impactedEntries = StringUtils.join(svMapping, Constants.COMMA);
		} else {
			List<BudgetRuleVendorBrandMapping> budgetRuleVendorBrandMapping = (List<BudgetRuleVendorBrandMapping>) budgetRuleTemplate
					.getBudgetRuleFilterMapping();
			List<String> vbMapping = new ArrayList<>();
			for (BudgetRuleVendorBrandMapping mapping : budgetRuleVendorBrandMapping) {
				vbMapping.add(StringUtils.join(mapping.getVendor(),  Constants.MtzBudget.RULE_SPLITTER, mapping.getBrand()));
			}
			impactedEntries = StringUtils.join(vbMapping, Constants.COMMA);
		}
		return impactedEntries;
	}

	private Map<String, String> getEmailDynamicDataMap(BudgetRule budgetRule, BudgetTrackingInfo budgetTrackingInfo) {
		Map<String, String> valueMap = new HashMap<>();
		valueMap.put("MTZRuleName", budgetRule.getName());
		valueMap.put("MTZID", String.valueOf(budgetRule.getId()));
		valueMap.put("MTZBudget", String.valueOf(budgetTrackingInfo.getBudget()));
		valueMap.put("MTZRemaining", String.valueOf(budgetTrackingInfo.getBudget() - budgetTrackingInfo.getBudgetSpent()));
		if (BudgetRuleType.SUPC_VENDOR.equals(budgetRule.getRuleType())) {
			valueMap.put("RuleType", StringUtils.join(Constants.SUPC, Constants.MtzBudget.RULE_SPLITTER, Constants.VENDOR_CODE));
			valueMap.put("EntryImpactedKey", StringUtils.join(Constants.SUPC, Constants.MtzBudget.RULE_SPLITTER, Constants.VENDOR_CODE));
		} else {
			valueMap.put("RuleType", StringUtils.join(Constants.VENDOR_CODE, Constants.MtzBudget.RULE_SPLITTER, Constants.BRAND));
			valueMap.put("EntryImpactedKey", StringUtils.join(Constants.VENDOR_CODE, Constants.MtzBudget.RULE_SPLITTER, Constants.BRAND));
		}
		double warnLimit = Double.parseDouble(psCacheManager.getCashbackConfigForkey(Constants.BatchCBConfiguration.BUDGET_WARN_LIMIT, "100.0")) * 100;
		double alertLimit = Double.parseDouble(psCacheManager.getCashbackConfigForkey(Constants.BatchCBConfiguration.BUDGET_ALERT_LIMIT, "100.0")) * 100;
		valueMap.put("WarnPer", String.valueOf(warnLimit));
		valueMap.put("AlertPer", String.valueOf(alertLimit));
		return valueMap;
	}


	public void sendEmailOnApprove(BudgetRule budgetRule) {
		try {
			log.info("Sending email on approve for rule {}", budgetRule);
			Map<String, String> valueMap = getEmailOnApproveDynamicDataMap(budgetRule);

			String templatePath = getClass().getClassLoader().getResource("emailTemplates/budgetRuleApproveEmailTemplate.html").getPath();

			String htmlMessage = FileUtils.readFileToString(new File(templatePath));
			htmlMessage = velocityEngineService.replacePlaceHolders(htmlMessage, valueMap);

			EmailRequest emailRequest = new EmailRequest();
			emailRequest.setFromEmail(
					psCacheManager.getCashbackConfigForkey(Constants.BatchCBConfiguration.BUDGET_ALERT_FROM, "noreply@snapdeals.co.in"));
			emailRequest.setFromName(
					psCacheManager.getCashbackConfigForkey(Constants.BatchCBConfiguration.BUDGET_ALERT_FROM_NAME, "noreply@snapdeals.co.in"));
			emailRequest.setSubject("Monetization: Budget rule " + budgetRule.getName() + " has been approved");
			emailRequest.setHtmlContent(htmlMessage);
			emailRequest.setReplyToEmail("monetization-support@snapdeal.com");
			emailRequest.setTriggerId(String.valueOf(budgetRule.getId()));
			
			String sendTo = psCacheManager.getCashbackConfigForkey(Constants.BatchCBConfiguration.BUDGET_ALERT_TO, "");
			String[] sendToArray = sendTo.split(";");
			for (String to : sendToArray) {
				emailRequest.setTo(to);
				emailSenderManager.sendEmail(emailRequest);
			}
			
		} catch (Exception e) {
			log.error("Error while sending warning alert for {} - {}", budgetRule, ExceptionUtils.getStackTrace(e));
		}
	}

	private Map<String, String> getEmailOnApproveDynamicDataMap(BudgetRule budgetRule) {
		Map<String, String> valueMap = new HashMap<>();
		valueMap.put("RuleName", budgetRule.getName());
		valueMap.put("RuleApprover", budgetRule.getApprover());
		valueMap.put("RuleId", String.valueOf(budgetRule.getId()));
		valueMap.put("RuleTrackingId", budgetRule.getRuleTrackingId().toString());
		valueMap.put("RuleName", budgetRule.getName());

		if (BudgetRuleType.SUPC_VENDOR.equals(budgetRule.getRuleType())) {
			valueMap.put("RuleType", StringUtils.join(Constants.SUPC, Constants.MtzBudget.RULE_SPLITTER, Constants.VENDOR_CODE));
		} else {
			valueMap.put("RuleType", StringUtils.join(Constants.VENDOR_CODE, Constants.MtzBudget.RULE_SPLITTER, Constants.BRAND));
		}

		valueMap.put("RuleRo", budgetRule.getRo());
		valueMap.put("RuleSaleTarget", budgetRule.getSaleTarget().toString());
		valueMap.put("RuleGSVTarget", budgetRule.getGsvTarget().toString());
		valueMap.put("MTZBudget", budgetRule.getBudget().toString());
		valueMap.put("RuleStartTime", budgetRule.getStartTime().toString());
		valueMap.put("RuleEndTime", budgetRule.getEndTime().toString());
		valueMap.put("RuleCreatedBy", budgetRule.getCreator());

		return valueMap;
	}
}
