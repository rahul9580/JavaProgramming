package com.snapdeal.monetization.scheduler.utils;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

import com.snapdeal.ipms.admin.base.update.event.IPMSEventSRO;
import com.snapdeal.ipms.admin.event.type.IPMSEventType;
import com.snapdeal.monetization.base.aerospike.cache.CacheManager;
import com.snapdeal.monetization.common.constant.AeroConstant;
import com.snapdeal.monetization.common.enums.PSEventType;
import com.snapdeal.monetization.event.enums.VsvpDataType;
import com.snapdeal.monetization.event.handler.IpmsEventHandler;
import com.snapdeal.monetization.event.handler.KafkaEventProducer;
import com.snapdeal.monetization.schedular.service.IOpsService;

@Component
public class VsvpEnableUtils {
	private static final Logger LOG = LoggerFactory.getLogger(VsvpEnableUtils.class);

	@Autowired
	@Qualifier("kafkaEventProducer")
	private KafkaEventProducer kafkaEventProducer;
	
	@Autowired
	private CacheManager cahce;
	
	@Autowired
	private IOpsService			opsService;
	
	@Autowired
	private IpmsEventHandler ipmsEventHandler;
	
	public void handleEvent(Set<String> vendorSupcTokenList,PSEventType event,boolean wasPresent,Map<String,Object> data)
	{
		LOG.info("Handling vsvp activity for :: " + vendorSupcTokenList + "::" + event + "::" + wasPresent);
		if(vendorSupcTokenList.size()==0)
			return;
		for(String token : vendorSupcTokenList)
		{
			String []tokenData = token.split(":");
			if(tokenData.length < 2)
				continue;
			String supc = tokenData[0];
			String vendor = tokenData[1];
			if(data == null)
				data = cahce.getRecord(AeroConstant.Namespace.MONETIZATION_PERSISTENCE, AeroConstant.Set.VENDOR_SUPC_VENDOR_PRICE, supc + AeroConstant.SEPRATOR + vendor);
			PSEventType opponent = getOpponent(event);
			if(wasPresent)
			{
				LOG.info("Checking opponent data if null case");
				if(opponent==null || data.get(opponent==PSEventType.MARGIN_UPDATE?AeroConstant.VendorSupcVendorPrice.MARGIN:AeroConstant.VendorSupcVendorPrice.FULFILMENT_MODEL)!=null)
				{
					LOG.info("Sending supc-process event");
					Set<String> tokenDataList = new HashSet<>();
					tokenDataList.add(token);
					kafkaEventProducer.sendSupcProcessEvent(tokenDataList, event.getEventId());
				}
				else{
					setRetryEvent(supc,vendor,opponent);
				}
			}
			else
			{
				LOG.info("sending retry event for ::" + supc + "::" + vendor);
				if(data.get(opponent==PSEventType.MARGIN_UPDATE?AeroConstant.VendorSupcVendorPrice.MARGIN:AeroConstant.VendorSupcVendorPrice.FULFILMENT_MODEL)==null)
				{
					setRetryEvent(supc,vendor,opponent);
				}
				else{
					setRetryEvent(supc, vendor, PSEventType.INVENTORY_IN_UPDATE);
				}
			}
		}
	}

	private void setRetryEvent(String supc, String vendor, PSEventType opponent) {
		LOG.info("opponent:: " + opponent);
		if(opponent == PSEventType.FM_UPDATE || opponent == PSEventType.MARGIN_UPDATE)
		{
			opsService.saveOpsRetryEvent(supc, vendor,  opponent == PSEventType.FM_UPDATE?VsvpDataType.COCOFS.getId():VsvpDataType.OPS.getId());
		}
		else
		{
			IPMSEventSRO sro = new IPMSEventSRO();
			sro.setEventType(IPMSEventType.INVENTORY_STATUS);
			sro.setSupc(supc);
			sro.setSellerCode(vendor);
			List<IPMSEventSRO> ipmsEventSROList = new ArrayList<>();
			ipmsEventSROList.add(sro);
			ipmsEventHandler.saveRetrableEvent(ipmsEventSROList);
		}
	}

	private PSEventType getOpponent(PSEventType event) {
		if(event == PSEventType.FM_UPDATE)
		{
			return PSEventType.MARGIN_UPDATE;
		}
		else if(event == PSEventType.MARGIN_UPDATE)
		{
			return PSEventType.FM_UPDATE;
		}
		return null;
	}
	
	public void saveNewAssosiation(String supc,String vendor)
	{
		IPMSEventSRO sro = new IPMSEventSRO();
		sro.setEventType(IPMSEventType.NEW_ASSOCIATION);
		sro.setSupc(supc);
		sro.setSellerCode(vendor);
		List<IPMSEventSRO> ipmsEventSROList = new ArrayList<>();
		ipmsEventSROList.add(sro);
		ipmsEventHandler.saveRetrableEvent(ipmsEventSROList);
	}

}
